;; Tmux
(global-unset-key (kbd "C-o"))

;; Customize user interface.
(menu-bar-mode 0)
(when (display-graphic-p)
  (tool-bar-mode 0)
  (scroll-bar-mode 0))
(setq inhibit-startup-screen t)

;; Set loadpath
;;(add-to-list 'load-path (expand-file-name "~/.emacs.d/elisp"))
;;(require 'flymake-extension)
;;
;;(push '(face . highlight) (get :note 'flymake-overlay-control))


;; Manpages same window new buffer!
(setq-default Man-notify-method 'pushy)

;; Write customizations to a separate file instead of this file.
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(load custom-file t)

;; Load theme after custom.el to emacs wont freak out
;;(load-theme 'doom-plain-dark t)
;;(load-theme 'almost-mono-black t)
(load-theme 'grb256 t) ;;custom theme

;; Backup and Autosave Directories
(setq temporary-file-directory "~/.tmp/")
(setq backup-directory-alist
      `((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms
      `((".*" ,temporary-file-directory t)))

;; Auto revert buffers for changed files
;;(global-auto-revert-mode 1)

;; Prevent UI dialogs
;;(setq use-dialog-box nil)

;; Remember last cursor location of opened files
(save-place-mode 1)


;; Use ESC as universal get me out of here command
;; (define-key key-translation-map (kbd "ESC") (kbd "C-g"))

;; Enable SSH editing
(setq tramp-default-method "ssh")

;; Highlight matching pairs of parentheses.
(setq show-paren-delay 0)
(show-paren-mode)

(defun show-paren--locate-near-paren-ad ()
  "Locate an unescaped paren \"near\" point to show.
If one is found, return the cons (DIR . OUTSIDE), where DIR is 1
for an open paren, -1 for a close paren, and OUTSIDE is the buffer
position of the outside of the paren.  Otherwise return nil."
  (let* ((before (show-paren--categorize-paren (point))))
    (when (or
       (eq (car before) 1)
       (eq (car before) -1))
      before)))

(advice-add 'show-paren--locate-near-paren :override #'show-paren--locate-near-paren-ad)

(require 'paren)
(set-face-background 'show-paren-match (face-background 'default))
;;(set-face-foreground 'show-paren-match "#def")
(set-face-attribute 'show-paren-match nil :weight 'extra-bold)



;; Move file to trash instead of removing.
;;(setq-default delete-by-moving-to-trash t)


;; Use spaces, not tabs, for indentation.
(setq-default indent-tabs-mode nil)

;; Insane
(defalias 'yes-or-no-p 'y-or-n-p)

;; Set default font face
;;(set-face-attribute 'default nil :font "Go Mono" :height 150)

(require 'gnutls)
(push "/usr/pkg/etc/libressl/cert.pem" gnutls-trustfiles)

;; Package configs
(require 'package)
;; Dont check package signatures - this is stupid
(setq package-check-signature nil)
(setq package-enable-at-startup nil)
(setq package-archives '(("org"       . "http://orgmode.org/elpa/")
                         ("gnu"       . "http://elpa.gnu.org/packages/")
                         ("melpa"     . "https://melpa.org/packages/")))
(package-initialize)

;; We will use 'use-package' to install and configure packages.
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
(eval-when-compile (require 'use-package))


;; Packages

;; Themes
(use-package which-key :ensure t)
(use-package doom-themes :ensure t)

;; Other packages
(use-package orderless :ensure t)
(use-package visual-regexp :ensure t)

;; evil
(use-package evil 
    :ensure t
    :init
    (setq evil-want-keybinding nil)
    (evil-mode))

(use-package evil-collection
    :after evil
    :ensure t
    :config
    (evil-collection-init))

(global-set-key [remap evil-quit] 'kill-buffer-and-window)

;; open buffers in new tab not new window
;;(setq pop-up-frames t)
;;(setq display-buffer-base-action '(display-buffer-in-new-tab))


;; Enable tab-bar-mode
(global-tab-line-mode t) ;;makes buffers to tabs -- for noobs
(setq tab-line-new-button-show nil)  ;; do not show add-new button
(setq tab-line-close-button-show nil)  ;; do not show close button
(setq tab-line-separator "")  ;; set it to empty

;; Fix scroll behaviour
(setq scroll-conservatively 101)

;; tab color settings
(set-face-attribute 'tab-line-tab nil ;; active tab in another window
      :inherit 'tab-line
      :foreground "gray40" :background "gray20" :box nil)
(set-face-attribute 'tab-line-tab-current nil ;; active tab in current window
      :background "#000000" :foreground "white" :box nil)
(set-face-attribute 'tab-line-tab-inactive nil ;; inactive tab
      :background "white" :foreground "black" :box nil)
(set-face-attribute 'tab-line-highlight nil ;; mouseover
      :background "white" :foreground 'unspecified)


;; exec-path-from-shell
(use-package exec-path-from-shell :ensure t)

;; tramp ivy counsel
(use-package counsel :ensure t)
(use-package ivy :ensure t)
(use-package counsel-tramp :ensure t)

;; Org mode stuff
(use-package ox-rfc :ensure t)

;; Show vi-like tilde in the fringe on empty lines.
(use-package vi-tilde-fringe
  :ensure t
  :config
  (global-vi-tilde-fringe-mode 1))


;; Move-text lines around with meta-up/down.
(use-package move-text
  :ensure t
  :config
  (move-text-default-bindings))

;; Enable rainbow delimiters in prog buffers
(use-package rainbow-delimiters :ensure t)
(add-hook 'prog-mode-hook #'rainbow-delimiters-mode)

;; Never use tabs, use spaces instead.
(setq tab-width 2)
(setq js-indent-level 2)
(setq css-indent-offset 2)
(setq c-basic-offset 2)
(setq-default indent-tabs-mode nil)
(setq-default c-basic-offset 2)
(setq-default tab-width 2)
(setq-default c-basic-indent 2)

;; set save location
(setq backup-directory-alist `(("." . "~/.emacs.d/saves")))

;; Start packages
(which-key-mode)

;; Completion framework
(unless (package-installed-p 'vertico)
  (package-install 'vertico))

;; Enable completion by narrowing
;; M-x etc..
(vertico-mode t)


;; Optionally use the `orderless' completion style.
(use-package orderless
:init
(setq completion-styles '(orderless basic)
    completion-category-defaults nil
    completion-category-overrides '((file (styles partial-completion)))))


;;; Extended completion utilities
(unless (package-installed-p 'consult)
  (package-install 'consult))
(global-set-key [rebind switch-to-buffer] #'consult-buffer)
(setq read-buffer-completion-ignore-case t
      read-file-name-completion-ignore-case t
      completion-ignore-case t)

;; Enable line numbering by default
(global-display-line-numbers-mode t)
;;(global-linum-mode t)

;; Disable line-numbers minor mode for neotree
;;(add-hook 'neo-after-create-hook (lambda (&optional dummy) (display-line-numbers-mode -1)))


;;; LSP Support
(unless (package-installed-p 'eglot)
  (package-install 'eglot))
(setq eldoc-echo-area-use-multiline-p nil)

(setq lsp-eldoc-enable-hover nil)
(setq eldoc-echo-area-prefer-doc-buffer t)
(setq lsp-signature-auto-activate nil)
;;            eldoc-echo-area-use-multiline-p nil)

;; LSP RUST
(use-package rust-mode :ensure t)
(add-hook 'rust-mode-hook 'eglot-ensure)
(add-hook 'rust-mode-hook
          (lambda () (setq indent-tabs-mode nil)))

(setq rust-format-on-save t)
;; (add-hook 'rust-mode-hook
;;          (lambda () (prettify-symbols-mode)))

(use-package tree-sitter
  :config
  (require 'tree-sitter-langs)
  (global-tree-sitter-mode)
  (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode))

;; Enable LSP support by default in programming buffers
(add-hook 'prog-mode-hook #'eglot-ensure)

;; Flycheck
;(use-package flycheck
;               :init
;               :ensure t
;               )
;(add-hook 'after-init-hook #'global-flycheck-mode)

;;; Pop-up auto-completion

(use-package company
  :ensure
  :custom
  (company-idle-delay 0.5) ;; how long to wait until popup
  ;; (company-begin-commands nil) ;; uncomment to disable popup
  :bind
  (:map company-active-map
	      ("C-n". company-select-next)
	      ("C-p". company-select-previous)
	      ("M-<". company-select-first)
	      ("M->". company-select-last)
	      ;;("<tab>". tab-indent-or-complete)
	      ;;("TAB". tab-indent-or-complete))
		  ("<tab>". company-complete-selection)
		  ("TAB". company-complete-selection))
  (:map company-mode-map
	("<tab>". tab-indent-or-complete)
	("TAB". tab-indent-or-complete)))
;; above is strange, fix later

(use-package yasnippet
  :ensure
  :config
  (yas-reload-all)
  (add-hook 'prog-mode-hook 'yas-minor-mode)
  (add-hook 'text-mode-hook 'yas-minor-mode))



(defun company-yasnippet-or-completion ()
  (interactive)
  (or (do-yas-expand)
      (company-complete-common)))

(defun check-expansion ()
  (save-excursion
    (if (looking-at "\\_>") t
      (backward-char 1)
      (if (looking-at "\\.") t
        (backward-char 1)
        (if (looking-at "::") t nil)))))

(defun do-yas-expand ()
  (let ((yas/fallback-behavior 'return-nil))
    (yas/expand)))

(defun tab-indent-or-complete ()
  (interactive)
  (if (minibufferp)
      (minibuffer-complete)
    (if (or (not yas/minor-mode)
            (null (do-yas-expand)))
        (if (check-expansion)
            (company-complete-common)
          (indent-for-tab-command)))))

;; Enable Company by default in programming buffers
;;(add-hook 'prog-mode-hook #'company-mode)

(setq lsp-rust-analyzer-server-display-inlay-hints t)

;; Miscellaneous options
(setq-default major-mode
              (lambda () ; guess major mode from file name
                (unless buffer-file-name
                  (let ((buffer-file-name (buffer-name)))
                    (set-auto-mode)))))
(setq confirm-kill-emacs #'yes-or-no-p)
(setq window-resize-pixelwise t)
(setq frame-resize-pixelwise t)
(save-place-mode t)
(savehist-mode t)
(recentf-mode t)
(defalias 'yes-or-no #'y-or-n-p)


;; Customize Rainbow Delimiters.
;;(require 'rainbow-delimiters)
;;(set-face-foreground 'rainbow-delimiters-depth-1-face "#c66")  ; red
;;(set-face-foreground 'rainbow-delimiters-depth-2-face "#6c6")  ; green
;;(set-face-foreground 'rainbow-delimiters-depth-3-face "#69f")  ; blue
;;(set-face-foreground 'rainbow-delimiters-depth-4-face "#cc6")  ; yellow
;;(set-face-foreground 'rainbow-delimiters-depth-5-face "#6cc")  ; cyan
;;(set-face-foreground 'rainbow-delimiters-depth-6-face "#c6c")  ; magenta
;;(set-face-foreground 'rainbow-delimiters-depth-7-face "#ccc")  ; light gray
;;(set-face-foreground 'rainbow-delimiters-depth-8-face "#999")  ; medium gray
;;(set-face-foreground 'rainbow-delimiters-depth-9-face "#666")  ; dark gray


;; WindMove keybinds
(global-set-key (kbd "C-c <left>")  'windmove-left)
(global-set-key (kbd "C-c <right>") 'windmove-right)
(global-set-key (kbd "C-c <up>")    'windmove-up)
(global-set-key (kbd "C-c <down>")  'windmove-down)

;; dired keybinds

(use-package dired-sidebar
  :ensure t
  :commands (dired-sidebar-toggle-sidebar)
  :init
  (add-hook 'dired-sidebar-mode-hook
            (lambda ()
              (unless (file-remote-p default-directory)
                (auto-revert-mode))))
  :config
  (push 'toggle-window-split dired-sidebar-toggle-hidden-commands)
  (push 'rotate-windows dired-sidebar-toggle-hidden-commands)
  (setq dired-sidebar-subtree-line-prefix "__")
  (setq dired-sidebar-use-term-integration t)
  (setq dired-use-ls-dired nil)
  )

;; Omit files in dired
(setq dired-omit-files
    (rx (or (seq bol (? ".") "#")     ;; emacs autosave files
        (seq bol "." (not (any "."))) ;; dot-files
        (seq "~" eol)                 ;; backup-files
        (seq bol "CVS" eol)           ;; CVS dirs
        )))

;; Toggle on hide by default
(add-hook 'dired-mode-hook 'dired-omit-mode)





(global-set-key (kbd "C-c d")  'dired-sidebar-toggle-sidebar)

(recentf-open-files)
