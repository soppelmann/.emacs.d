;; -*- mode: emacs-lisp; coding: utf-8-unix -*-
;; Minibuffer history file, automatically generated by ‘savehist’.

(setq savehist-minibuffer-history-variables '(counsel-git-history helm-M-x-input-history counsel-git-grep-history denote--keyword-history denote--title-history bookmark-history grep-history eww-prompt-history gud-gud-gdb-history modus-themes--list-colors-prompt-history consult--man-history command-history fontaine--natnum-history fontaine--default-font-family-history fontaine--face-history fontaine--font-display-hist ef-themes--select-theme-history modus-themes--select-theme-history compile-history face-name-history consult--grep-history gud-gdb-history read-expression-history read-from-kill-ring-history Man-topic-history shell-command-history ivy-history read-char-history evil-ex-history read-number-history eglot-command-history minibuffer-history buffer-name-history file-name-history empty-history extended-command-history))
(setq counsel-git-grep-history '(#("contrib/subrepo-cheri-libunwind/src/DwarfParser.hpp:247:      assert_pointer_in_bounds((pint_t)__builtin_cheri_address_set(" 0 51 (ivy-index 3 face ivy-grep-info) 51 52 (ivy-index 3) 52 55 (ivy-index 3 face ivy-grep-line-number) 55 123 (ivy-index 3)) #("test.cpp:1:#include <iostream>" 0 30 (ivy-index 0)) #("test.cpp:5:    return 0;" 0 24 (ivy-index 0)) #("test.cpp:4:    std::cout << \"Hello World!\\n\";" 0 45 (ivy-index 0)) "ftok"))
(setq denote--keyword-history '("emacs"))
(setq denote--title-history '("test"))
(setq bookmark-history '("hashmaps3.rs" "hashmaps3.rs" "Developer" "hashmaps3.rs" "Developer"))
(setq grep-history '("grep --color=auto -nH --null -e "))
(setq eww-prompt-history '("sdf.org" "google.com"))
(setq gud-gud-gdb-history '("gdb --fullname "))
(setq modus-themes--list-colors-prompt-history '("modus-operandi-tinted"))
(setq consult--man-history '("write"))
(setq command-history '((eglot-format) (execute-extended-command nil "eglot-format") (eglot-find-declaration) (execute-extended-command nil "eglot-find-declaration") (eglot-find-implementation) (execute-extended-command nil "eglot-find-implementation") (eglot-format) (execute-extended-command nil "eglot-format") (eglot-format) (execute-extended-command nil "eglot-format") (eglot-format) (execute-extended-command nil "eglot-format") (eglot-format) (execute-extended-command nil "eglot-format") (eglot-format) (execute-extended-command nil "eglot-format") (eglot-format) (execute-extended-command nil "eglot-format" "form") (evil-yank 3454 3494 'line nil nil) (eglot-format) (execute-extended-command nil "eglot-format") (evil-yank 3389 3452 'line nil nil) (evil-yank 4309 4364 'line nil nil) (evil-yank 1418 2280 'line nil nil) (evil-yank 1418 1875 'line nil nil) (man-follow "glm::rotate") (execute-extended-command nil "man-follow" "man fo") (eglot-find-implementation) (execute-extended-command nil "eglot-find-implementation") (eglot-find-declaration) (execute-extended-command nil "eglot-find-declaration" "eglot find") (eglot-find-implementation) (execute-extended-command nil "eglot-find-implementation") (evil-yank 2889 2927 'line nil nil) (eglot-format) (execute-extended-command nil "eglot-format" "format") (evil-yank 821 862 'line nil nil) (evil-yank 3204 3287 'line nil nil) (evil-yank 821 862 'line nil nil) (evil-yank 13401 13464 'line nil nil) (evil-yank 6206 6281 'line nil nil) (multi-vterm) (execute-extended-command nil "multi-vterm" "v") (company-mode 'toggle) (execute-extended-command nil "company-mode" "co") (find-file "~/Documents/Courses/EDAF80/Seminars/Sem1/HelloWorld.cpp" t) (kill-buffer "triangle.cpp") (treemacs nil) (execute-extended-command nil "treemacs") (treemacs nil) (execute-extended-command nil "treemacs" "treemacs") (treemacs-mode) (execute-extended-command nil "treemacs-mode" "treem") (find-file "~/Documents/Courses/EDAF80/Seminars/Sem1/triangle.cpp" t) (dired-create-directory "~/Documents/Courses/EDAF80/Seminars/Sem1/triangle.hpp") (dired-create-directory "~/Documents/Courses/EDAF80/Seminars/Sem1/triangle.cpp") (dired-create-directory "~/Documents/Courses/EDAF80/Seminars/Sem1") (tab-bar-rename-tab "OpenGL" nil) (eglot-format) (execute-extended-command nil "eglot-format" "for") (evil-delete 2889 2915 'line) (evil-yank 2301 2371 'line nil nil) (evil-yank 3221 3247 'exclusive nil nil) (evil-yank 3221 3242 'exclusive nil nil) (evil-yank 3221 3247 'exclusive nil nil) (evil-yank 3221 3227 'exclusive nil nil) (evil-yank 3221 3222 'exclusive nil nil) (evil-yank 3246 3247 'exclusive nil nil) (evil-delete 2443 2572 'line) (evil-delete 2572 2578 'line) (evil-yank 3112 3239 'line nil nil) (company-mode 'toggle) (execute-extended-command nil "company-mode") (company-mode 'toggle) (execute-extended-command nil "company-mode") (company-mode 'toggle) (execute-extended-command nil "company-mode") (eglot-format) (execute-extended-command nil "eglot-format") (evil-delete 13368 13398 'line) (evil-delete 3198 3258 'line) (evil-delete 3182 3242 'line) (evil-yank 1935 1995 'line nil nil) (eglot-format) (execute-extended-command nil "eglot-format") (evil-delete 12946 12947 'line) (evil-delete 12946 13004 'line) (evil-delete 12946 12976 'line) (evil-delete 12890 12941 'line) (evil-delete 12890 12957 'line) (evil-delete 12890 12956 'line) (evil-delete 12890 12966 'line) (evil-yank 540 940 'line nil nil) (evil-yank 540 882 'line nil nil) (evil-yank 540 852 'line nil nil) (evil-yank 540 796 'line nil nil) (evil-yank 852 940 'line nil nil) (evil-yank 852 940 'line nil nil) (evil-delete 13523 13584 'line) (evil-yank 13340 13401 'line nil nil)))
(setq fontaine--natnum-history '("180"))
(setq fontaine--default-font-family-history '("Iosevka Comfy" "Iosevka Comfy Fixed" "Iosevka Comfy Motion" "Iosevka Comfy Wide" "Iosevka Comfy" "SF Pro" "JetBrains Mono" "Go Mono" "Iosevka Comfy" "JetBrains Mono" "SF Pro" "Go Mono" "Iosevka Comfy"))
(setq fontaine--face-history '("default"))
(setq fontaine--font-display-hist '("large" "presentation" "regular" "presentation" "large" "presentation" "large" "presentation" "small" "presentation" "large" "presentation" "large" "regular" "large" "presentation" "large" "regular" "large" "regular" "large" "regular" "large" "regular" "large" "regular" "large" "regular" "large" "regular"))
(setq ef-themes--select-theme-history '("ef-symbiosis" "ef-winter" "ef-cherie" "ef-bio" "ef-summer" "ef-dark" "ef-summer" "ef-dark" "ef-summer" "ef-light" "ef-frost" "ef-bio" "ef-dark" "ef-night" "ef-dark" "ef-bio"))
(setq modus-themes--select-theme-history '("modus-vivendi" "modus-vivendi-deuteranopia" "modus-operandi" "modus-operandi-deuteranopia" "modus-operandi-tritanopia" "modus-operandi-tinted" "modus-operandi-tritanopia" "modus-vivendi-tinted" "modus-vivendi-tritanopia" "modus-vivendi-deuteranopia" "modus-vivendi-tinted" "modus-vivendi-tritanopia" "modus-operandi-tritanopia" "modus-vivendi-tritanopia" "modus-vivendi-tinted" "modus-vivendi-tritanopia" "modus-operandi-tritanopia" "modus-operandi-tinted" "modus-vivendi-tinted" "modus-vivendi" "modus-operandi" "modus-vivendi" "modus-vivendi-tinted" "modus-operandi-deuteranopia" "modus-vivendi" "modus-operandi-deuteranopia" "modus-vivendi-tinted" "modus-operandi-tinted" "modus-vivendi-tritanopia" "modus-operandi-deuteranopia" "modus-operandi-tritanopia" "modus-vivendi-tritanopia" "modus-operandi-tinted" "modus-vivendi-tritanopia" "modus-vivendi" "modus-operandi" "modus-vivendi" "modus-operandi-tinted" "modus-operandi-tritanopia" "modus-operandi-tinted" "modus-vivendi" "modus-vivendi-deuteranopia" "modus-vivendi-tritanopia" "modus-operandi" "modus-vivendi"))
(setq face-name-history '("default"))
(setq consult--grep-history '("#border"))
(setq gud-gdb-history '("lldb " "gdb -i=mi "))
(setq Man-topic-history '("write(1)"))
(setq shell-command-history '("/nix/store/ypjgqgmvvvkwx7505qfilv0v07z1hx4g-bash-5.1-p16/bin/bash" "/usr/pkg/bin/bash"))
(setq ivy-history '(#("crypto/openssh/defines.h:630:# define offsetof(" 0 24 (ivy-index 0 face ivy-grep-info) 24 25 (ivy-index 0) 25 28 (ivy-index 0 face ivy-grep-line-number) 28 47 (ivy-index 0)) #("netb" 0 4 (ivy-index 0)) "/ssh:netbsd:" #("ne" 0 2 (ivy-index 0)) "/ssh:netbsd:" "/ssh:netbsd:" #("net" 0 3 (ivy-index 0)) "/ssh:netbsd:" "/ssh:netbsd:" "/ssh:netbsd:" #("env" 0 3 (ivy-index 0)) "/ssh:envs:" "/ssh:netbsd:" "/ssh:netbsd:" "/ssh:netbsd:" #("/ssh:envs:" 0 10 (ivy-index 12)) #("/ssh:brutus:" 0 12 (ivy-index 10)) #("/scp:envs:" 0 10 (ivy-index 12)) #("/scp:brutus:" 0 12 (ivy-index 10)) #("/scp:lucifer:" 0 13 (ivy-index 8)) #("/ssh:ma.sdf.org:" 0 16 (ivy-index 0)) #("/ssh:lucifer:" 0 13 (ivy-index 8)) #("/ssh:sdf.org:" 0 13 (ivy-index 2)) #("/ssh:Brutus:" 0 12 (ivy-index 8)) #("/ssh:Lucifer:" 0 13 (ivy-index 6)) #("/ssh:netbsd:" 0 12 (ivy-index 2)) #("/ssh:localhost:" 0 15 (ivy-index 2))))
(setq evil-ex-history '(#("1" 0 1 (ex-index 1)) #("w" 0 1 (ex-index 1)) #("1" 0 1 (ex-index 1)) #("w" 0 1 (ex-index 1)) #("1" 0 1 (ex-index 1)) #("w" 0 1 (ex-index 1)) #("q" 0 1 (ex-index 1)) #("w" 0 1 (ex-index 1)) #("q" 0 1 (ex-index 1)) #("w" 0 1 (ex-index 1)) #("q" 0 1 (ex-index 1)) #("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("1" 0 1 (ex-index 1)) #("q" 0 1 (ex-index 1)) #(".q" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("1" 0 1 (ex-index 1)) #("w" 0 1 (ex-index 1)) #("1" 0 1 (ex-index 1)) #("1000" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4)) #("1" 0 1 (ex-index 1)) #("100" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3)) #("1" 0 1 (ex-index 1)) #("w" 0 1 (ex-index 1)) #("1" 0 1 (ex-index 1)) #("w" 0 1 (ex-index 1)) #("100000" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6)) #("10000" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5)) #("100000000" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9)) #("w" 0 1 (ex-index 1)) #("10000" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5)) #("w" 0 1 (ex-index 1)) #("853" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3)) #("100000" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6)) #("w" 0 1 (ex-index 1)) #("q" 0 1 (ex-index 1)) #("w" 0 1 (ex-index 1)) #("q" 0 1 (ex-index 1)) #("w" 0 1 (ex-index 1)) #("q" 0 1 (ex-index 1)) #("w" 0 1 (ex-index 1)) #("1" 0 1 (ex-index 1)) #("w" 0 1 (ex-index 1)) #("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("100000" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6)) #("w" 0 1 (ex-index 1)) #("100000" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6)) #("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("10000" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5)) #("w" 0 1 (ex-index 1)) #("1" 0 1 (ex-index 1)) #("w" 0 1 (ex-index 1)) #("100000" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6)) #("w" 0 1 (ex-index 1)) #("100000" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6)) #("w" 0 1 (ex-index 1)) #("10000" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5)) #("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("100000" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6)) #("w" 0 1 (ex-index 1)) #("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("12" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("q!" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("set paste" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9)) #("w" 0 1 (ex-index 1)) #("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("1" 0 1 (ex-index 1)) #("q!" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("1" 0 1 (ex-index 1)) #("q" 0 1 (ex-index 1)) #("w" 0 1 (ex-index 1)) #("1000" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4)) #("set paste" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7) 7 8 (ex-index 8) 8 9 (ex-index 9)) #("w" 0 1 (ex-index 1)) #("5" 0 1 (ex-index 1)) #("q!" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("q" 0 1 (ex-index 1)) #("w" 0 1 (ex-index 1)) #("q" 0 1 (ex-index 1)) #("q!" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("q" 0 1 (ex-index 1)) #("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("q" 0 1 (ex-index 1)) #("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("q!" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("q" 0 1 (ex-index 1)) #("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("q" 0 1 (ex-index 1))))
(setq read-number-history '("80" "20" "80" "7" "80" "4"))
(setq eglot-command-history '("rust-analyzer " "cpp"))
(setq minibuffer-history '("OpenGL" "yes" "src/" "show_basis" "/src/EDAF80/assignment4" "*dashboard*" "show_basis" "ripgrep" "show_basis" "dired--unhide" "dired-sidebar-toggle-hidden-commands" "next-screen-context-lines" "c" "next-screen-context-lines" "diff-hl" "*dashboard*" "yes" "projectile" "cmake-project" "cmake-mode" "company-glsl" "glsl-mode" "yes" "coterm-1.6" "coterm" "*dashboard*" "multi-vterm" "vterm" "/bin/zsh" "terminals" "/bin/zsh" "*dashboard*" "markdown-mode-20230607.320" "markdown-preview-mode-20221006.1601" "markdown-preview-mode" "*dashboard*" "term-mode-hook" "prog-mode-hook" "dired-create-files" "tab-bar-show" "*dashboard*" "winner-dont-bind-my-keys" "*dashboard*" "yes" "dired-create-files" "delete-trailing-whitespace" "*dashboard*" "delete-trailing-whitespace" "no-fringes" "treemacs-20230615.1714" "doom-one" "delete-trailing-whitespace" "magit-section-20230521.1803" "magit-20230620.913" "helm-core-20230624.1641" "helm-20230624.1641" "helm" "tags-add-tables" "tags-revert-without-query" "r" "*dashboard*" "run" "shmget" "ftok" "*dashboard*" "counsel-etags" "*dashboard*" "/bin/sh" "dired-create-files" "multi-term" "yes" "*dashboard*" "multi-term" "/bin/zsh" "dired" "dired create" "dired" "dired-create-files" "display-line-numbers" "display-line-numbers-mode" "no-fringes" "ranger-20210125.330" "ranger" "dired-ranger-20230512.1107" "dired-ranger" "yes" "eshell-ls-files" "evil-set-initial-state" "yes" "hashmaps3.rs" "Developer" "evil-set-initial-state" "elisp-autofmt" "dashboard-item-shortcuts" "eshell-ls-files" "insert" "use-package" "insert" "yes" "insert"))
(setq buffer-name-history '("triangle.cpp" "assignment1.cpp" "*Ibuffer*" "*ripgrep-search*" "0001-Fix-GLM-version.patch" "assignment1.cpp" "code" "assignment1.cpp<code>" "EDAF80_Assignment1" "CMakeLists.txt" "keygen.c" "*terminal<2>*" "Skeleton_v21.1.cpp" "init.el" "*terminal<1>*" "*terminal<2>*" "*terminal<1>*" "alias" "*ansi-term*" "init.el" "bookmarks" "1655311525_MrKrotchyGary20.png" "tinyc.c" "sixnine.c" "drawterm-macosx11-12.4" ":~/Work/" "Jupyter Notebooks" "*Messages*" "*EGLOT (rustlings/rust-mode) events*" "*scratch*" "exercises" "*eshell*" ":~/" "my-dashboard.el" "rustlings" "hashmaps3.rs" "emacs.el" ":~/Developer/" ":~/Desktop/" "Developer" "hashmaps" "init.el" "20230624T124445--test__emacs.org" "*eww*" "*scratch*" "init.el" "*Open Recent*" "init.el" "*eshell*" "media_CYEt-H2WMAQOkFn.png" ":~/Developer/Tutorials-master/master0Fnone_classes/1_x86_Demystified/practice/" "yabairc" "#emacs@irc.libera.chat" "#rcirc@irc.libera.chat" "*irc.libera.chat*" "efnet@irc.libera.chat" "efnet.org@irc.libera.chat" "*eww*" "*eshell*" "*gud*" "Examensarbete - 7_juni.pdf" "1652760854796.png" "16645573576090.mp4" "1660326807009680.jpg" "1659551180166109.webm" "Examensarbete - 7_juni.pdf" "*Help*" "HELLO" "16653181148180.mp4" "*ansi-term*" "*Calendar*" "addr.c" ".mkshrc" ".condarc" "tinyc.c" "*ansi-term*" "strings4.rs" "structs1.rs" "spacebarrc" "README.md" "*ansi-term*<3>" "*ansi-term*<2>" "init.el" "*ansi-term*" "*shell*" "a21a0abd591f6bb0947bed1898e57e31.png" ":~/Developer/TinyC/" "tinyc.c" "vecs1.rs" "main.c" "README.md<smart_pointers>" "README.md<exercises>" "flake.nix" "flake.lock" "shell.nix" ":~/Developer/rustlings/exercises/functions/" "variables5.rs" "*ansi-term*" "variables2.rs" "variables4.rs"))
(setq file-name-history '("~/Documents/Courses/EDAF80/Seminars/Sem1/HelloWorld.cpp" "~/Documents/Courses/EDAF80/Labs/lab1/" "~/Documents/Courses/EDAF80/Seminars/Sem1/triangle.cpp" "~/Documents/Courses/EDAF80/Seminars/Sem1/triangle.hpp" "~/Documents/Courses/EDAF80/Seminars/Sem1/triangle.cpp" "~/Documents/Courses/EDAF80/Seminars/Sem1" "~/Documents/Courses/EDAF80/code/src/EDAF80/bin/" "~/Documents/Courses/EDAF80/code/" "~/Documents/Courses/EDAF80/code/src/EDAF80/bin/" "~/Documents/Courses/EDAF80/code/" "~/Documents/Courses/EDAF80/CG_Labs/BUILD.rst" "~/Documents/Courses/EDAF80" "~/Library/Preferences/com.codeweavers.CrossOver.plist" "~/Developer/RE/findrealkey/keygen/keygen.c" "~/Developer/RE/SimpleKeyGen/mykeygen" "~/Developer/RE/test.cpp" "~/.emacs.d/init.el" "~/Developer/RE/test.cpp" "~/Developer/AdvancedUPE/apue-code/04/wait-unlink.c" "~/Desktop/test.cpp" "~/Developer/AdvancedUPE/apue-code/11/Makefile" "~/Documents/Courses/Old/ETSF15 - Komsys/Labs/Lab2/klar/Skeleton_V21.1/datacommlib.h" "~/Documents/Courses/Old/ETSF15 - Komsys/Labs/Lab2/klar/Skeleton_V21.1/datacommlib.cpp" "~/Documents/Courses/Old/ETSF15 - Komsys/Labs/Lab2/Skeleton_V21.1/datacommsimlib.h" "~/Documents/Courses/Old/ETSF15 - Komsys/Labs/Lab2/Skeleton_V21.1/datacommsimlib.cpp" "~/Documents/Courses/Old/ETSF15 - Komsys/Labs/Lab2/Skeleton_V21.1/datacommsimlib.h" "~/Documents/Courses/Old/ETSF15 - Komsys/Labs/Lab2/Skeleton_V21.1/Skeleton_v21.1.cpp" "~/Documents/Courses/Old/ETSF15 - Komsys/Labs/Lab2/Skeleton_V21.1/Skeleton_v21.1.ino" "~/Documents/Courses/Old/ETSF15 - Komsys/Labs/Lab2/Skeleton_V21.1/Skeleton_v21.1.cpp" "~/Documents/Courses/Old/ETSF15 - Komsys/Labs/Lab2/Skeleton_V21.1/Skeleton_v21.1." "~/Documents/Courses/Old/ETSF15 - Komsys/Skeleton_v21.1/Skeleton_v21.1.cpp" "~/Documents/Courses/Old/ETSF15 - Komsys/Skeleton_v21.1/datacommsimlib.cpp" "~/Documents/Courses/Old/ETSF15 - Komsys/Skeleton_v21.1/datacommsimlib.h" "~/Documents/Courses/Old/ETSF15 - Komsys/Skeleton_v21.1/datacommsimlib.cpp" "~/Desktop/3macsclient.platypus" "~/Desktop/Emacsclient.platypus" "~/Desktop/ImageResizer.platypus" "~/Desktop/lol" "~/Desktop/test.sh" "~/Documents/Courses/Old/ETSF15 - Komsys/Labs/Lab2/Skeleton_V21.1/Skeleton_v21.1.cpp" "~/Developer/git/PianobarNowPlayable/PianobarNowPlayable/" "~/.emacs.d/" "~/Developer/RE/" "/ssh:netbsd:~/apue-code/08/" #("/ssh:netbsd:/home/getz/apue-code/" 0 33 (ivy-index 13)) "/ssh:netbsd:~/apue-code/08/" "/ssh:netbsd:~/apue-code/" "/ssh:netbsd:~/apue-code/08/" "/ssh:netbsd:~/apue-code/04/" "/ssh:netbsd:~/apue-code/04/cd.c" #("/ssh:netbsd:/home/getz/.bashrc" 0 30 (ivy-index 19)) #("/ssh:envs:/home/getz/" 0 21 (ivy-index 0)) "~/Developer/RE/test.cpp" "~/Virtual/openbsdsetup.txt" "~/Virtual" "~/Virtual/openbsdsetup.txt" "~/.emacs.d/eshell/alias" "~/.aliases" "~/Developer/RE/test.cpp" "~/Developer/RE" "~/.emacs.d/" "~/Desktop/emacs.el" "~/.emacs.d/desktops/" "~/.emacs.d/" "~/.emacs.d/init.el" "~/.emacs.d/eshell/aliases" "~/.emacs.d/eshell/alias" "~/.emacs.d/init.el" "~/Desktop/emacs.el" "~/Developer/Tutorials-master/hacking_weaponizing_solitaire/cards_dll_proxy/cards_proxy.cpp" "~/Developer/Tutorials-master/master0Fnone_classes/1_x86_Demystified/practice/practice.c" "~/Developer/Shit/quinesnake/quinesnake.cpp" "~/*Open Recent*" "~/Downloads/Examensarbete - 7_juni.pdf" "~/.emacs.d/custom.el" "~/Pictures/1660326807009680.jpg" "~/Pictures/16645573576090.mp4" "~/Pictures/1659551180166109.webm" "~/Pictures/1652760854796.png" "/opt/homebrew/Cellar/emacs-plus@30/30.0.50/share/emacs/30.0.50/etc/HELLO" "~/Movies/16653181148180.mp4" "~/Developer/TinyC/tinyc.c" "~/.emacs.d/early-init.el" "~/Developer/cheribsd/crypto/openssh/addr.c" "~/Developer/AdvancedUPE/apue-code/11/hello.c" "~/Developer/wio/main.c" "~/.condarc"))
(setq extended-command-history '("eglot-format" "eglot-find-declaration" "eglot-find-implementation" "eglot-format" "man-follow" "eglot-find-implementation" "eglot-find-declaration" "eglot-find-implementation" "eglot-format" "multi-vterm" "company-mode" "treemacs" "treemacs-mode" "eglot-format" "company-mode" "eglot-format" "company-mode" "eglot-format" "company-mode" "multi-vterm" "eglot-format" "pwd" "multi-vterm" "cmake-project-mode" "company-mode" "eglot-format" "company-mode" "eglot-format" "consult-ripgrep" "prog-mode" "eglot--managed-mode" "ripgrep-search-mode" "counsel-fzf" "consult-ripgrep" "cmake-project-mode" "projectile-find-dir" "projectile-mode" "projectile-dired" "projectile-ripgrep" "ibuffer" "projectile-ripgrep" "ibuffer" "projectile-ripgrep" "package-install" "counsel-ag" "projectile-ripgrep" "counsel-fzf" "eglot-find-declaration" "eglot-find-implementation" "find-function" "eglot-format" "company-mode" "dired-omit-mode" "diff-hl-mode" "company-mode" "company-files" "company-mode" "company-files" "company-mode" "scroll-down" "scroll-up" "eglot-format" "company-mode" "multi-vterm" "company-mode" "diff-hl-mode" "modus-themes-select" "flymake-mode" "company-mode" "diff-hl-mode" "package-install" "treemacs-git-commit-diff-mode" "counsel-git" "man-follow" "company-mode" "eglot--managed-mode" "company-glsl" "company-mode" "company-glsl" "glsl-mode" "company-mode" "artist-mode" "company-mode" "evil-mode" "multi-vterm" "evil-mode" "artist-mode" "company-mode" "evil-mode" "man-follow" "man" "company-mode" "multi-vterm" "modus-themes-select" "company-mode" "eglot--managed-mode" "glsl-mode" "projectile-dired" "cmake-project-mode" "cmake-project-configure-project"))
(setq evil-jumps-history '((4195 #1="/Users/getz/Documents/Courses/EDAF80/Labs/lab1/code/src/EDAF80/CelestialBody.cpp") (4309 #1#) (4280 #1#) (4195 #1#) (4309 #1#) (4280 #1#) (4195 #1#) (3750 #1#) (2764 #2="/Users/getz/Documents/Courses/EDAF80/Labs/lab1/code/src/EDAF80/CelestialBody.hpp") (3751 #1#) (2764 #2#) (3751 #1#) (1500 #2#) (3751 #1#) (483 #3="/Users/getz/Documents/Courses/EDAF80/Labs/lab1/code/src/EDAF80/assignment1.cpp") (3006 #1#) (230 #3#) (3006 #1#) (1500 #2#) (1863 #2#) (1722 #2#) (1647 #2#) (1500 #2#) (2778 #2#) (3006 #1#) (230 #3#) (540 #1#) (13571 #3#) (261 #1#) (340 #2#) (246 #1#) (11 #1#) (5122 #1#) (4918 #1#) (4838 #1#) (4582 #1#) (4332 #1#) (4261 #1#) (4237 #1#) (4169 #1#) (4144 #1#) (4119 #1#) (13571 #3#) (4545 #1#) (12207 #3#) (14574 #3#) (4545 #1#) (13403 #3#) (4544 #1#) (13403 #3#) (4544 #1#) (13403 #3#) (4549 #1#) (13403 #3#) (4545 #1#) (13515 #3#) (13403 #3#) (3456 #1#) (13596 #3#) (3391 #1#) (13362 #3#) (4529 #1#) (13738 #3#) (4545 #1#) (13403 #3#) (13403 #3#) (4556 #1#) (13403 #3#) (13403 #3#) (4527 #1#) (13366 #3#) (13366 #3#) (4355 #1#) (14574 #3#) (13609 #3#) (13610 #3#) (4355 #1#) (13610 #3#) (13610 #3#) (4493 #1#) (13365 #3#) (4493 #1#) (13365 #3#) (13365 #3#) (13365 #3#) (13365 #3#) (4493 #1#) (13365 #3#) (4493 #1#) (13370 #3#)))
